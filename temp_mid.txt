                    {
                        // Remove matching availability slot (1h slot)
                        string startStr = startDt.ToString("HH:mm");
                        string endStr = endDt.ToString("HH:mm");
                        var slot = await _userDbContext.Availabilities
                            .FirstOrDefaultAsync(a => a.CaregiverId == appointment.CaregiverId && a.Date.Date == startDt.Date && a.StartTime == startStr && a.EndTime == endStr);
                        if (slot != null)
                        {
                            await _availabilityRepository.DeleteAvailability(slot.AvailabilityId);
                        }
                    }
                    catch { /* ignore best-effort cleanup */ }

                    return RedirectToAction(nameof(Table));
                }
            }
        }
        catch (DbUpdateException)
        {
            ModelState.AddModelError(string.Empty, "Unable to save appointment. Try again.");
        }

        // Rebuild inputs/dropdowns for redisplay
        var caregiversForRedisplay = _userDbContext.Users
            .Where(u => u.Role == UserRole.Caregiver)
            .Select(u => new { u.UserId, u.Name })
            .ToList();
        ViewBag.CaregiverList = new SelectList(caregiversForRedisplay, "UserId", "Name");

        var roleInt2 = HttpContext.Session.GetInt32("CurrentUserRole");
        var userId2 = HttpContext.Session.GetInt32("CurrentUserId");
        var clientsQuery2 = _userDbContext.Users.Where(u => u.Role == UserRole.Client);
        if (roleInt2.HasValue && userId2.HasValue && (UserRole)roleInt2.Value == UserRole.Client)
        {
            clientsQuery2 = clientsQuery2.Where(u => u.UserId == userId2.Value);
            ViewBag.AvailableSlots = BuildAvailableSlotSelectList();
        }
        else if (clientId.HasValue)
        {
            clientsQuery2 = clientsQuery2.Where(u => u.UserId == clientId.Value);
            ViewBag.AvailableSlots = BuildAvailableSlotSelectList();
            ViewBag.ForClientId = clientId.Value;
        }
        var clients2 = clientsQuery2
            .Select(u => new { u.UserId, u.Name })
            .ToList();
        ViewBag.ClientList = new SelectList(clients2, "UserId", "Name");
        return View(appointment);
    }

    [HttpGet]
    public async Task<IActionResult> Update(int id, bool returnToManage = false, int? caregiverId = null)
    {
        var appointment = await _appointmentRepository.GetAppointmentById(id);
        if (appointment == null)
        {
            _logger.LogError("[AppointmentController] appointment not found when updating the AppointmentId {AppointmentId:0000}", id);
            return BadRequest("Appointment not found");
        }
        var roleInt = HttpContext.Session.GetInt32("CurrentUserRole");
        var userId = HttpContext.Session.GetInt32("CurrentUserId");
        if (roleInt.HasValue && userId.HasValue && (UserRole)roleInt.Value == UserRole.Client && appointment.ClientId != userId.Value)
        {
            return Forbid();
        }
        // Populate dropdowns for caregiver and client
        var caregivers = _userDbContext.Users
            .Where(u => u.Role == UserRole.Caregiver)
            .Select(u => new { u.UserId, u.Name })
            .ToList();
        ViewBag.CaregiverList = new SelectList(caregivers, "UserId", "Name", appointment.CaregiverId);

        var clients = _userDbContext.Users
            .Where(u => u.Role == UserRole.Client)
            .Select(u => new { u.UserId, u.Name })
            .ToList();
        ViewBag.ClientList = new SelectList(clients, "UserId", "Name", appointment.ClientId);
        ViewBag.ReturnToManage = returnToManage;
        ViewBag.ManageCaregiverId = caregiverId;
        return View(appointment);
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Update([Bind("AppointmentId,Date,CaregiverId,ClientId,Location")] Appointment appointment, bool returnToManage = false, int? caregiverId = null)
    {
        if (ModelState.IsValid)
        {
            try
            {
                var existing = await _appointmentRepository.GetAppointmentById(appointment.AppointmentId);
                if (existing == null)
                {
                    _logger.LogError("[AppointmentController] appointment not found for AppointmentId");
                    return NotFound();
                }

                var roleInt = HttpContext.Session.GetInt32("CurrentUserRole");
                var userId = HttpContext.Session.GetInt32("CurrentUserId");
                if (roleInt.HasValue && userId.HasValue && (UserRole)roleInt.Value == UserRole.Client && existing.ClientId != userId.Value)
                {
                    return Forbid();
                }

                // Update only allowed fields to avoid overwriting non-posted values
                existing.Date = appointment.Date;
                existing.CaregiverId = appointment.CaregiverId;
                existing.ClientId = appointment.ClientId; // kept from hidden field
                existing.Location = appointment.Location;

                bool returnOk = await _appointmentRepository.UpdateAppointment(appointment);
                if (returnOk)
                {
                    if (returnToManage && caregiverId.HasValue)
                    {
                        return RedirectToAction("Manage", "Availability", new { caregiverId = caregiverId.Value });
                    }
                    return RedirectToAction(nameof(Table));
                }
            }
            catch (DbUpdateConcurrencyException)
            {
                ModelState.AddModelError(string.Empty, "The appointment was updated by another process. Reload and try again.");
            }
            catch (DbUpdateException)
            {
                ModelState.AddModelError(string.Empty, "Unable to save changes. Try again.");
            }
        }

        // Rebuild dropdowns when redisplaying the form. Without this, the app does not return to the appointments table and does not save the update.
        var caregivers = _userDbContext.Users
            .Where(u => u.Role == UserRole.Caregiver)
            .Select(u => new { u.UserId, u.Name })
            .ToList();
        ViewBag.CaregiverList = new SelectList(caregivers, "UserId", "Name", appointment.CaregiverId);

        var clients = _userDbContext.Users
            .Where(u => u.Role == UserRole.Client)
            .Select(u => new { u.UserId, u.Name })
            .ToList();
        ViewBag.ClientList = new SelectList(clients, "UserId", "Name", appointment.ClientId);
        ViewBag.ReturnToManage = returnToManage;
        ViewBag.ManageCaregiverId = caregiverId;
        return View(appointment);
    }

    [HttpGet]
    public async Task<IActionResult> Delete(int id, bool returnToManage = false, int? caregiverId = null)
    {
        var appointment = await _appointmentRepository.GetAppointmentById(id);
        if (appointment == null)
        {
            _logger.LogError("[AppointmentController] appointment not found for Id {AppointmentId:0000}", id);
            return BadRequest("Not found");
        }
        var roleInt = HttpContext.Session.GetInt32("CurrentUserRole");
        var userId = HttpContext.Session.GetInt32("CurrentUserId");
        if (roleInt.HasValue && userId.HasValue && (UserRole)roleInt.Value == UserRole.Client && appointment.ClientId != userId.Value)
        {
            return Forbid();
        }
        ViewBag.ReturnToManage = returnToManage;
        ViewBag.ManageCaregiverId = caregiverId;
        return View(appointment);
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> DeleteConfirmed(int id, bool returnToManage = false, int? caregiverId = null)
    {
        var existing = await _appointmentRepository.GetAppointmentById(id);
        if (existing == null)
        {
            return NotFound();
        }
        var roleInt = HttpContext.Session.GetInt32("CurrentUserRole");
        var userId = HttpContext.Session.GetInt32("CurrentUserId");
        if (roleInt.HasValue && userId.HasValue && (UserRole)roleInt.Value == UserRole.Client && existing.ClientId != userId.Value)
        {
            return Forbid();
        }
        bool returnOk = await _appointmentRepository.DeleteAppointment(id);
        if (!returnOk)
        {
            _logger.LogError("[AppointmentController] Appointment deletion failed for the Id {AppointmentId:0000}", id);
            return BadRequest("Appointment deletion failed");
        }

        // Re-open the corresponding availability slot (best-effort)
        try
        {
            var start = existing.Date;
            var end = start.AddHours(1);
            string startStr = start.ToString("HH:mm");
            string endStr = end.ToString("HH:mm");

            bool exists = await _userDbContext.Availabilities.AnyAsync(a => a.CaregiverId == existing.CaregiverId && a.Date.Date == start.Date && a.StartTime == startStr && a.EndTime == endStr);
            if (!exists)
            {
